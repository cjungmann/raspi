#!/usr/bin/env bash

declare ProgressTarget="$1"

declare coloron="[31;1m"
declare coloroff="[m"

declare -f NECHO
is_root() { [ "$USER" = "root" ]; }

echo_simple() { echo "$@"; }

echo_target() { echo "$@" >> "$ProgressTarget"; }


if [ "${#ProgressTarget}" -gt 0 ]; then
    NECHO=echo_target
else
    NECHO=echo_simple
fi

# This is useful code, that matches text between underscores
# which can then can be manipulated.  In this case, the text
# is surrounded by console_codes color commands.
echo_notify()
{
    local msg="${1}"

    local -a rearr=(
        '(^|[^_])'     # match beginning of string or a of non-asterisk character
        '_'              # match the *
        '([^_]+)'      # match characters between the pair of asterisks
        '_'              # match the *
        '([^_]|$)'     # match a non-asterisk character or the end of the string
    )

    local IFS=""
    echo "$msg" | sed -E "s/${rearr[*]}/\1[31;1m\2[m\3/g" >&2
}

already_installed()
{
    local pname="$1"
    local gresult
    gresult=$( dpkg -s "${pname}" 2>/dev/null | grep ^Status )
    # falling out of function will allow calling function to
    # query the result of the `which` command.
}

already_snapped()
{
    local name="$1"
    local gresult=$( which "$name" > /dev/null  )
    # falling out of function will allow calling function to
    # query the result of the `which` command.
}    

hl_snap()
{
    local name="$1"
    if already_snapped "$name"; then
        $NECHO "_${name}_ is already installed with snap"
    else
        $NECHO "Installing _${name}_."
        snap install "${name}"
    fi
}

hl_install()
{
    local name="$1"

    if already_installed "$name"; then
        $NECHO "_${name}_ is already installed"
    else
        $NECHO -n "Installing _${name}_ ..."
        sudo apt-get -y install "${name}"
        if [ "$?" -eq 0 ]; then
            $NECHO "   complete"
        else
            $NECHO "   failed"
        fi
    fi
}

show_usage()
{
    $NECHO "This utility must be run as root to install applications."
}

do_initial_os_update()
{
    apt-get update
}

run_onload_scripts()
{
    local -a scripts=( $( ls -1 ) )
    local script
    for script in "${scripts[@]}"; do
        if [ -x "$script" ] && ! [ "${script:0:1}" = '_' ]; then
            sudo ./$script
        fi
    done
}

uninstall_timer()
{
    local tpath="/etc/systemd/system/timers.target.wants/firstboot.timer"
    if [ -h "$tpath" ]; then
        unlink "$tpath"
    fi
}

#########################
# Execution Begins Here #
#########################

declare -a AppsArr=(
    emacs-nox
    git
    locate
    pinfo
    emacs-common-non-dfsg
)

if is_root; then

    local HOME=/home/pi

    $NECHO "About to update software sources."
    apt-get update
    # apt-get -y upgrade

    declare -i index=0
    declare aname
    for aname in "${AppsArr[@]}"; do
        $NECHO -n "app $(( ++index )) of ${#AppsArr[*]} ..."
        hl_install "$aname"
    done

    # mdless is a tool for reading markdown files.  We need snapd to install it.
    # hl_install snapd
    # hl_snap mdless

    # Enable systemd-resolved.service to enable resolvectl command
    systemctl enable systemd-resolved.service

    # Make an alias so invoking 'info' opens 'pinfo'
    echo                      >> "$HOME/.bashrc"
    echo "alias info='pinfo'" >> "$HOME/.bashrc"

    # Modify .bashrc for emacs use

    # Configure for EMACS use:
    # Only change editor value if it's not already set.
    if [ -z "$EDITOR" ]; then
        echo >> "$HOME/.bashrc"
        echo "export EDITOR=emacs" >> "$HOME/.bashrc"
    fi

    if ! grep -q -P 'INFOPATH.*emacs' "$HOME/.bashrc"; then
        echo                                         >> "$HOME/.bashrc"
        echo "# Help pinfo find emacs info page"     >> "$HOME/.bashrc"
        echo "export INFOPATH=/usr/share/info/emacs" >> "$HOME/.bashrc"
    fi

    # Do custom scripts last, in case a script results in a reboot:
    if [ -d "$HOME/onload.d" ]; then
        pushd "$HOME/onload.d"
        run_onload_scripts
        popd
    fi

    $NECHO "Changing home file ownerships to pi:pi"
    pushd "$HOME"
    chown -R pi:pi *
    popd

    $NECHO "Finished with installs."

    uninstall_timer
else
    show_usage
fi
