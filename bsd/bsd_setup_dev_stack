#!/usr/bin/env bash

source "bsd_setup_common"

# Each line below describes a package to install.  Comment-out
# undesirable packages to prevent them being installed.
#
# Where a line includes '#' characters, the '#' separates the
# line into multipe values.  The first value is the name by
# which the package is installed.  For packages whose executable
# name doesn't match the package name, the second value is a
# name by which the script can test if the package is already
# installed (in case this script is run more than once).  The
# third value, if included, is the name of a function, called
# upon success installing the package, to continue setting up
# the package.
declare -a DEV_STACK=(
    git
    wget
    emacs-nox^emacs
    texinfo^makeinfo
    apache24^httpd^setup_apache24
    mariadb105-server^mariadb
    php80^php
    npm
    ^uglifyjs^setup_uglify
    
)

declare -a LOAD_RESULTS=()
declare LOADER

is_command_installed() { type "$1" 2>1 1>/dev/null; }

set_loader()
{
    local -n loader="LOADER"
    if is_command_installed pkg; then
        loader=( pkg install )
    elif is_command_install apt; then
        loader=( apt-get install) 
    elif is_command_install pacman; then
        loader=( pacman -S )
    else
        echo "Unknown installer, terminating program."
        exit 1
    fi
}

load_app()
{
    if ! [ "$LOADER" ]; then
        echo "App loader not defined, terminating program."
        exit 1
    fi

    local -i exit_code=1
    local target="$1"
    local apptest="${2:-$target}"
    local followup="$3"
    local -n results=LOAD_RESULTS
    local result_string

    if is_command_installed "$apptest"; then
        result_string="${NONEED}$target is already installed.${COFF}"
    else
        "${LOADER[@]}" "$target"
        if [ $? -eq 0 ]; then
            result_string="${DONE}$target successfully installed.${COFF}"
            if [ "$followup" ]; then
                "$followup"
            fi
            exit_code=0
        else
            result_string="${FAIL}Failed to install '$target'.${COFF}"
        fi
    fi

    results+=( "$result_string" )
    return $exit_code
}

setup_apache24()
{
    local -n results=LOAD_RESULTS
    local result_string

    grep apache24_enable /etc/rc.conf
    if [ $? -ne 0 ]; then
        echo "apache24_enable=\"YES\"" >> /etc/rc.conf
        service apache24 start
        result_string="  ${DONE}enabled apache24.${COFF}"
    else
        result_string="  ${FAIL}Failed to enable apache24.${COFF}"
    fi

    results+=( "$result_string" )
}

setup_uglify()
{
    local owd="$PWD"
    local user="${SUDO_USER:-USER}"
    local path="/home/${user}/src"
    mkdir -p "$path"
    cd "$path"
    git clone https://github.com/mishoo/UglifyJS
    cd UglifyJS
    npm link .
    cd "$owd"
}

display_status_report()
{
    echo
    echo "#======================================#"
    echo "# Dev Stack Installation Status Report #"
    echo "#======================================#"

    local line
    for line in "${LOAD_RESULTS[@]}"; do
        echo "$line"
    done
}

load_emacs_info()
{
    local infopath=$( info -w emacs )
    if [[ "$infopath" =~ "emacs" ]]; then
       echo "EMACS info already installed"
    else
       local OPWD="$PWD"
       cd /home/chuck

       if ! [ -d "emacs-27.1" ]; then
           wget --no-check-certificate https://ftp.gnu.org/gnu/emacs/emacs-27.1.tar.xz
           unxz emacs-27.1.tar.xz
           tar -xf emacs-27.1.tar
       fi

       makeinfo -v --no-split -o emacs.info emacs-27.1/doc/emacs/emacs.texi
       if [ $? -eq 0 ]; then
           local infodir=$( get_info_dir )

           gzip -c emacs.info > "${infodir}/emacs.info.gz"
           install-info --add-once "${infodir}/emacs.info.gz" "${infodir}/dir"
       fi

       # clean up
       rm -rf emacs-27.1
       rm -f emacs-27.1.tar
       rm -f emacs.info
       
       cd "$OPWD"
    fi
}

npm_load()
{
    npm install "$1" -g
}

dev_stack_warn()
{
    local IFS=$'^'
    local -a aline
    for line in "${DEV_STACK[@]}"; do
        aline=( $line )
        echo "Installing ${aline[0]}"
    done
}

dev_stack_install()
{
    local IFS=$'^'
    local -a aline
    for line in "${DEV_STACK[@]}"; do
        aline=( $line )
        load_app "${aline[@]}"
    done
}

echo "This script will install several packages in the goal"
echo "of initializing a newly-installed OS to be a productive"
echo "web server.  You will see a list of applications to be"
echo "installed, then an opportunity to scrap installation while"
echo "you remove some items by editing this script."
echo
echo "Near the top of this script is an array that defines which"
echo "packages will be installed.  Comment-out packages that you"
echo "wish to omit.  Instructions can be found near the array."
echo

dev_stack_warn

echo "Continue with installing the above packages,"
if get_yes_no; then
    if is_root; then
        set_loader

        dev_stack_install

        # # load_app npm         # for uglifyjs
        # # npm_load uglify-js
        # # load_emacs_info

        display_status_report
    else
        echo "You must be root to install programs."
    fi
fi





