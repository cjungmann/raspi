#!/usr/bin/env bash

declare username
declare userfullname
declare userpw
declare usershell


declare IPS=$'\n'
declare -a user_info=(
    "username;User Name"
    "userfullname;Full Name"
    "*userpw;Password"
    "usershell;Default shell (sh, bash, etc)"
)

get_user_info()
{
    local setraw
    local -a setarr
    local -a extra_args
    local prompt vname IFS
    IFS=$';'
    for setraw in "${user_info[@]}"; do
        extra_args=()

        setarr=( $setraw )

        # Detect asterisk prefix signalling a password
        vname="${setarr[0]}"
        if [ "${vname:0:1}" == '*' ]; then
            extra_args=( -s )
            vname="${vname:1}"
        fi

        read_args=( "${read_args[@]}" -s )
        if [ "${#setarr[@]}" -gt 1 ]; then
            prompt="${setarr[1]}: "
        fi
        read "${extra_args[@]}" -p "$prompt"
        printf -v "$vname" "%s" "$REPLY"

        if [ "${#extra_args[@]}" -gt 0 ]; then
            echo
        fi
    done
}

show_user_info()
{
    local setraw
    local -a setarr
    local prompt vname IFS
    local silent_write
    IFS=$';'
    for setraw in "${user_info[@]}"; do
        silent_write=0
        setarr=( $setraw )
        # Detect asterisk prefix signalling a password
        vname="${setarr[0]}"
        if [ "${vname:0:1}" == '*' ]; then
            silent_write=1
            vname="${vname:1}"
        fi
        eval "local tname=\$$vname"
        if [ "$silent_write" -eq 0 ]; then
            printf "$vname is %s\n" "$tname"
        else
            printf "not showing $vname\n"
        fi
    done
}

load_app()
{
    if which "$1"; then
        echo "$1 is already installed"
    else
        echo "installing $1"
        pkg install "$1"
    fi
}

add_if_missing()
{
    local target="$1"
    local IFS=$'='
    local -a cmd=( $2 )
    if ! grep "${cmd[0]}" "$target"; then
        echo "Copying \"$2\" to $target"
        echo "$2" >> "$target"
    fi
}

enable_hostname_ping()
{
    echo "[34;1menable_hostname_ping()[m"
    pkg install -y nss_mdns
    pkg install -y avahi-app

    # Prepare /etc/avahi/avahi-daemon.conf
    # May require creating /etc/avahi directory
    # echo [server]
    # echo use-ipv4="YES" >> /etc/avahi/avahi-daemon.conf
    # echo enable-wide-area="YES" >> /etc/avahi/avahi-daemon.conf

    add_if_missing /etc/rc.conf avahi_daemon_enable="YES"
    add_if_missing /etc/rc.conf dbus_enable="YES"
    add_if_missing /etc/rc.conf avahi_dnsconfd_enable="YES"
}


enable_ssh()
{
    echo "[34;1menable_ssh()[m"
    if ! grep sshd_enable /etc/rc.conf; then
        echo sshd_enable=\"YES\" >> /etc/rc.conf
    else
        echo "Did not find sshd_enable"
    fi
}

enable_sudo()
{
    echo "[34;1menable_sudo()[m"
    load_app sudo
    sed -i 's/# %wheel ALL=\(ALL\) ALL/%wheel ALL=(ALL) ALL/' /usr/local/etc/sudoers
}


prepare_pkg()
{
    pkg update
    pkg upgrade
}
    

load_software()
{
    load_app emacs-nox
}

add_user_confirmed()
{
    local -a fmat=(
        "$username"
        ""          # uid
        ""          # gid
        ""          # class
        ""          # change (password aging)
        ""          # expire
        "$userfullname"
        ""          # home directory
        "$usershell"
        "$userpw"
        )
    local -a args=( -g wheel )
    if [ "$usershell" ]; then
        args=( "${args[@]}" -s "$usershell" )
    fi

    local IFS=$':'
    adduser "${args[@]}" -f "${fmat[*]}"
}

add_wheel_user()
{
    echo "[34;1madd_wheel_user()[m"
    get_user_info

    echo
    echo "Confirm the following information:"
    show_user_info
    read -p "Continue using this information (y/n)?"
    if [ $? -eq 0 ] && [ "$REPLY" == 'y' ]; then
        add_user_confirmed
    fi
}

set_hostname()
{
    echo "[34;1mset_hostname()[m"
    if [ $# -gt 0 ]; then
        local new_host_name="$1"
        sed -i 's/hostname=.*$/hostname=\"$new_host_name\"/' /etc/rc.conf
    fi
}

add_wheel_user             
set_hostname bsdpi         # Change hostname from `generic`, the default, to `bsdpi`
                           # Alter for another hostname

prepare_pkg                # first use of pkg should update and upgrade
enable_sudo                # install sudo and update sudoer file
enable_ssh                 # ssh not enabled by default on BSD

enable_hostname_ping       # prepare to recognize device using local DNS

# load_software
