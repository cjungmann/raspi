#!/usr/bin/env bash

show_usage()
{
    echo "You must identify the SD card: [32;1msda[m or [32;1msdb[m, etc."
    echo "You can use [32;1mlsblk[m to display the block devices."
    echo
    echo "build_sd [name of device]"
    echo "example: [32;1m./build_sd sda[m"
}

is_root() { [ "$USER" = "root" ]; }

umount_wait()
{
    local target="$1"
    local -i count=0
    while true; do
        if umount "$target"; then
            return 0
        fi

        if [ $(( ++count )) -gt 5 ]; then
            return 1
        fi

        sleep 1
    done
}


un_mount()
{
    local IFS=$'\n'
    local -a lines=( $( mount | grep "$Target" ) )
    local line
    local -a mounting

    local mpath mmount

    IFS=$' '
    for line in "${lines[@]}"; do
        mounting=( $line )
        mpath="${mounting[0]}"
        mmount="${mounting[2]}"
        echo "Unmounting [32;1m${mpath}[m at mount point [32;1m${mmount}[m"
        umount_wait "${mmount}"
    done
}

is_local_ip()
{
    local IFS=$'.'
    local -a ip=( $1 )

    if [ "${#ip[@]}" -ne 4 ]; then
       return 1
    fi

    local -i v1="${ip[0]}"
    local -i v2="${ip[1]}"

     if [ "$v1" -eq 10 ]; then
         return 0
     elif [ "$v1" -eq 192 ] && [ "$v2" -eq 168 ]; then
         return 0
     elif [ "$v1" -eq 172 ] && [ "$v2" -ge 16 ] && [ "$v2" -le 31 ]; then
         return 0
     else
         return 1
     fi
}

get_local_ip()
{
    local IFS=$'\n'
    local -a nifs ninfo
    local nif

    nifs=( $( ip -o -4 addr | awk '{ print $1 " " $3 }' - ) )
    for nif in "${nifs[@]}"; do
        ninfo=( $nif )
        if is_local_ip "${ninfo[1]}"; then
            echo "${ninfo[1]}"
            return 0
        fi
    done

    return 1
}

confirm_Target()
{
    if [ -z "$Target" ]; then
        show_usage
        exit 1
    fi

    echo -n "Attempting to confirm \"/dev/$Target\": "
    if [ -b "/dev/$Target" ]; then
        echo "target confirmed"
        return 0
    else
        echo "the directory, $Target, is not available"
        return 1;
    fi
}

get_image_filename()
{
    local -a lines
    local -i ndx
    local IFS=$'\n'

    lines=( $( ls | grep \.img - ) )
    if [ $? -eq 0 ] && [ "${#lines[@]}" -gt 0 ]; then
        # Select the last image found in alphabetical list:
        ndx="$(( ${#lines[@]} -1 ))"

        # Echo image filename as return value to subprocess
        echo "${lines[$ndx]}"

        return 0
    fi

    return 1
}

copy_image()
{
    local path_img="$1"
    local -a args=(
        bs=10M
        if="${path_img}"
        of="/dev/${Target}"
        status=progress
        conv=fsync
    )

    if is_root; then
        echo "Unmounting partitions, if necessary"
        un_mount
        
        echo "Wiping existing contents of SD card"
        wipefs -a "/dev/${Target}"
        if [ $? -eq 0 ];then

            echo "Calling dd using arguments: [32;1m${args[*]}[m"
            dd "${args[@]}"
            if [ $? -eq 0 ]; then
                sync
                echo "Successfully copied the image to the sd card."
                return 0
            else
                echo "Unexpected failure loading image to the sd card."
            fi
        else
            echo "wipefs failed, operation aborted."
        fi

    else
        echo "Failed to copy image: must be root."
    fi

    return 1
}

get_boot_partition()
{
    local -i maj min
    local line_disk=$( lsblk --list | grep "$Target" -)
    if [[ "$line_disk" =~ $"$Target"[[:space:]]+([[:digit:]]+):([[:digit:]]) ]]; then
        maj="${BASH_REMATCH[1]}"
        min="${BASH_REMATCH[2]}"
    else
        echo "BASH Regex failed"
        exit 1
    fi

    # local regx="$Target"[[:digit:]]+[[:space:]]+"$maj"
    local regx="$Target"[[:digit:]]\\+[[:space:]]\\+"$maj":1
    line_disk=$( lsblk --list | grep $regx - )
    if [ $? -eq 0 ]; then
        if [[ "$line_disk" =~ part[[:space:]]+(.*)$ ]]; then
            echo "${BASH_REMATCH[1]}"
            return 0
        fi
    else
        echo "GREP regex failed [32;1m$regx[m"
    fi

    exit 1
}

configure_boot_partition()
{
    if is_root; then
        cp wpa_supplicant.conf mpoint
        cp lamp_setup mpoint
        cp dev_setup mpoint
        touch mpoint/ssh
        echo "[33;1mDo not forget to set SSH with [34;1mraspi-config[33;1m upon first boot.[m"
    else
        echo "Must be root to mount and copy files."
    fi
}

add_load_apps_to_rc_local()
{
    local target=mpoint/etc/rc.local
    local -a seds=(
        '/^exit 0/i '
        'sudo chown pi:pi /home/pi/* # DELETE\n'
        'sudo /etc/init.d/load_apps  # DELETE\n'
        'sudo sed -i -E '
        "'/^.*# DELETE$/d' "
        '/etc/rc.local  # DELETE\n'
        )

    local IFS=$''
    sed -i "${seds[*]}" $target
}

prepare_home_directory()
{
    local pwd="$PWD"
    cd "$RASPI_HOME"

    echo "Preparing colors for 'less' output in [32;1m$PWD[m."
    echo                                   >> .bashrc
    cat "$startingdir/cache.d/less_colors" >> .bashrc

    cp "$startingdir/cache.d/load_apps" .
    cp -s load_apps firstboot
    mkdir Downloads

    mkdir SetupScripts
    cd SetupScripts
    cp "$startingdir/cache.d/build_firewall" .
    cp "$startingdir/cache.d/miusei_screen" .

    cd "$pwd"
}

prepare_firstboot()
{
    local owd="$PWD"
    local libpath="$RASPI_ROOT/lib/systemd/system"
    local timerpath="$RASPI_ROOT/etc/systemd/system/timers.target.wants"

    # Copy service and timer files to expected directory
    cp "$startingdir/cache.d/firstboot.service" "$libpath/firstboot.service"
    cp "$startingdir/cache.d/firstboot.timer" "$libpath/firstboot.timer"

    # Install timer file link
    cd "$timerpath"
    ln -s "/lib/systemd/system/firstboot.timer" "firstboot.timer"

    cd "$owd"
}

set_us_keyboard()
{
    echo $'\e[35;1m'"Configuring US-layout keyboard."$'\e[m'
    sed -E -i 's/KBLAYOUT="[[:alnum:]]{2}"/KBLAYOUT="us"/' "$RASPI_ROOT/etc/default/keyboard"
}

perform_custom_settings()
{
    local -a scripts=( $( ls -1 ) )
    local script
    for script in "${scripts[@]}"; do
        if [ -x "$script" ] && ! [ "${script:0:1}" = '*' ]; then
            echo "Custom script setting \"$script\""
            ( export RASPI_ROOT="$RASPI_ROOT" RASPI_HOME="$RASPI_HOME"; "./$script" )
        fi
    done
}

configure_root_partition()
{
    echo $'\e[35;1m'"In configure_root_partition."$'\e[m'
    local target=mpoint/etc/init.d
    if is_root; then

        prepare_home_directory
        prepare_firstboot

        if [ -d init.d ]; then
            pushd init.d
            perform_custom_settings
            popd
        fi

        if [ -d onload.d ]; then
            cp -r onload.d "$RASPI_HOME/onload.d"
        fi

        set_us_keyboard

        # Do this last, because rc.local will chown the contents
        # of /home/pi so the scripts can be run as user 'pi'.
        # add_load_apps_to_rc_local

        # enable_ssh
        # ./config_bluetooth
    fi
}

enable_ssh()
{
    local sshname
    local curdir="$PWD"
    cd "${startingdir}/mpoint/etc/rc2.d"

    sshname=$( ls | grep "K[[:digit:]]{2}ssh" )
    if [ "$?" -eq 0 ]; then
        mv "$sshname" "S${sshname:1}"
    fi

    cd "$curdir"
}

configure_sd_card()
{
   if ! [ -d mpoint ]; then
        mkdir mpoint
    fi

    if is_root; then
        # Work with boot partition:
        echo "[33;1mMounting the boot partition /dev/${Target}1 to mpoint.[m"
        mount /dev/"$Target"1 mpoint
        if [ "$?" -eq 0 ]; then
            configure_boot_partition
            sync
            umount_wait mpoint
        fi
    fi
 }


configure_sd_card_long()
{
    local RASPI_ROOT RASPI_HOME
    
    if ! [ -d mpoint ]; then
        mkdir mpoint
    fi

    if is_root; then
        # Work with boot partition:
        echo "[33;1mMounting the boot partition /dev/${Target}1 to mpoint.[m"
        mount /dev/"$Target"1 mpoint
        if [ "$?" -eq 0 ]; then
            configure_boot_partition
            sync
            umount_wait mpoint

            echo "[33;1mMounting the root partition /dev/${Target}2 to mpoint.[m"
            mount /dev/"$Target"2 mpoint
            if [ "$?" -eq 0 ]; then
                RASPI_ROOT="${PWD}/mpoint"
                RASPI_HOME="${RASPI_ROOT}/home/pi"

                configure_root_partition
                sync
                umount_wait mpoint
            else
                echo "Failed to mount /dev/${Target}2, error code $?"
                lsblk
            fi

        else
            echo "Failed to mount /dev/${Target}1, error code $?"
            lsblk
        fi


    else
        echo "Must be root to mount partitions."
    fi
}


#########################
# Execution Begins Here #
#########################

if [ "$#" -eq 0 ]; then
    show_usage
    exit 1
fi

if ! [ -f "wpa_supplicant.conf" ]; then
    echo "Please prepare a [32;1mwpa_supplicant.conf[m file, in this"
    echo "directory, to be copied to the SD card."
    echo
    echo "View the README.md file for a template for the file."
fi

declare Target="$1"

declare bootdir
declare startingdir="$PWD"

declare image

if confirm_Target; then

    image=$( get_image_filename )
    if [ $? -eq 0 ]; then
        echo "Using image '$image'"
        copy_image "$image"

        if [ $? -eq 0 ]; then
            # configure_sd_card   # minimal install
            configure_sd_card_long   # more complete configuration
        fi
        un_mount
    else
        echo
        echo "Failed to get image filename"
        echo "Download RaspberryPi OS image from https://www.raspberrypi.com/software/operating-systems"
        echo "Unpack compressed file: xz -d -v <image.tar.xz>"
    fi
else
    echo "Suspicious target"
fi

echo "Compare pre- and post-raspi-config files in /etc/ssh for how SSH is configured"
