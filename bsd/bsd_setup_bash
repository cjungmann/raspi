#!/usr/bin/env bash

declare username
declare userfullname
declare userpw
declare usershell

load_app()
{
    if which "$1"; then
        echo "$1 is already installed"
    else
        echo "installing $1"
        pkg install "$1"
    fi
}

add_if_missing()
{
    local target="$1"
    local IFS=$'='
    local -a cmd=( $2 )
    if ! grep "${cmd[0]}" "$target"; then
        echo "Copying \"$2\" to $target"
        echo "$2" >> "$target"
    fi
}

prepare_nsswitch_conf()
{
    local -a args=(
        -i
        's/hosts.*$/hosts: files mdns4_minimal [NOTFOUND=return] dns/'
        /etc/nsswitch.conf
        )

    sed "${args[@]]}"
}

prepare_avahi_daemon_conf()
{
    local PrevWD="$PWD"
    local target="/etc/avahi/avahi-daemon.conf"
    cd /etc
    if ! [ -d avahi ]; then
        mkdir avahi
        touch "$target"
        echo "[server]"         >> "$target"
        echo "use-ipv4=yes"     >> "$target"
        echo "use-ipv6=yes"     >> "$target"
        echo                    >> "$target"
        echo "[wide-area]"      >> "$target"
        echo "enable-wide-area" >> "$target"
    fi
}

enable_hostname_ping()
{
    echo "[34;1menable_hostname_ping()[m"
    pkg install -y nss_mdns
    pkg install -y avahi-app

    add_if_missing /etc/rc.conf avahi_daemon_enable="YES"
    add_if_missing /etc/rc.conf dbus_enable="YES"
    add_if_missing /etc/rc.conf avahi_dnsconfd_enable="YES"

    prepare_nsswitch_conf
    prepare_avahi_daemon_conf

    service avahi-daemon start
}


enable_ssh()
{
    echo "[34;1menable_ssh()[m"
    if ! grep sshd_enable /etc/rc.conf; then
        echo sshd_enable=\"YES\" >> /etc/rc.conf
    else
        echo "Did not find sshd_enable"
    fi
}

enable_sudo()
{
    echo "[34;1menable_sudo()[m"
    load_app sudo
    sed -i 's/# %wheel ALL=\(ALL\) ALL/%wheel ALL=(ALL) ALL/' /usr/local/etc/sudoers
}


prepare_pkg()
{
    pkg update
    pkg upgrade
}
    

load_development_stack()
{
    load_app emacs-nox
    load_app locate
    load_app valgrind
    load_app texinfo
    load_app emacs-common-non-dfsg
}


if [ -x "$add_user" ]; then
    "$add_user"
    echo "Removing user script to protect the password."
    rm "$add_user"
fi

prepare_pkg                # first use of pkg should update and upgrade
enable_sudo                # install sudo and update sudoer file
enable_ssh                 # ssh not enabled by default on BSD

enable_hostname_ping       # prepare to recognize device using local DNS

load_development_stack     # installs locate, emacs-nox, valgrind, texinfo, emacs-common-non-dfsg

